(function (React$1, ReactDOM, d3) {
  'use strict';

  React$1 = React$1 && Object.prototype.hasOwnProperty.call(React$1, 'default') ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const JustFace = ({ radius, strokeWidth }) => (
    React.createElement( 'circle', {
       			  r: radius, fill: "yellow", stroke: "black", 'stroke-width': strokeWidth })
    
   );

  const Eyes = ({eyeOffsetX, eyeOffsetY, eyeRadius}) => (
  React.createElement( React.Fragment, null,
  React.createElement( 'circle', { cx: - eyeOffsetX, cy: - eyeOffsetY, r: eyeRadius }),
      
             React.createElement( 'circle', { cx: + eyeOffsetX, cy: - eyeOffsetY, r: eyeRadius })
  )
  );

  const Mouth = ({mouthRadius, mouthWidth}) => {
      const mouthArc = d3.arc()
      .innerRadius(mouthRadius)
      .outerRadius(mouthRadius + mouthWidth)
      .startAngle(Math.PI / 2)
      .endAngle(Math.PI * 3/2);
      
    	return React.createElement( 'path', { d: mouthArc() })
  };

  const FaceContainer = ({ children, width, height, centerX, centerY }) => (
    
     React.createElement( 'svg', { width: width, height: height },
    
      React.createElement( 'g', {  transform: `translate(${centerX},${centerY})` },
    
        children
      )
      )
    
    
    );

  const Face = ({width,
                 height,
                 centerY,
                 centerX,
                 strokeWidth,
                 eyeOffsetX,
                 eyeOffsetY,
                 eyeRadius,
                 mouthRadius,
                 mouthWidth
                }) => (
       React.createElement( FaceContainer, { width: width, height: height, centerY: centerY, centerX: centerX },
        	React.createElement( JustFace, { radius: centerY - strokeWidth /2, strokeWidth: strokeWidth }),
      
          React.createElement( Eyes, { eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY, eyeRadius: eyeRadius }),
      
      		React.createElement( Mouth, { mouthRadius: mouthRadius, mouthWidth: mouthWidth })

      )
    );

  const Mouth2 = ({mouthRadius, mouthWidth}) => {
      const mouthArc = d3.arc()
      .innerRadius(mouthRadius)
      .outerRadius(mouthRadius + mouthWidth)
      .startAngle(Math.PI / -2)
      .endAngle(Math.PI * 0.5);
      
    	return React.createElement( 'g', { transform: "translate(0, 35 )" }, " ", React.createElement( 'path', { d: mouthArc() }), " ")
  };

  const Face2 = ({width,
                 height,
                 centerY,
                 centerX,
                 strokeWidth,
                 eyeOffsetX,
                 eyeOffsetY,
                 eyeRadius,
                 mouthRadius,
                 mouthWidth
                }) => (
       React.createElement( FaceContainer, { width: width, height: height, centerY: centerY, centerX: centerX },
        	React.createElement( JustFace, { radius: centerY - strokeWidth /2, strokeWidth: strokeWidth }),
      
          React.createElement( Eyes, { eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY, eyeRadius: eyeRadius }),
      
      		React.createElement( Mouth2, { mouthRadius: mouthRadius, mouthWidth: mouthWidth })

      )
    );

  const width=150;
  const height=150;

  const array = d3.range(9);


  const App = () => array.map(() => (
    React$1.createElement( React$1.Fragment, null,
    	React$1.createElement( Face, {
        width: width, height: height, centerX: width/2, centerY: height/2, strokeWidth: 5, eyeOffsetX: 40, eyeOffsetY: 30, eyeRadius: 6, mouthWidth: 7, mouthRadius: 40 }),
    
     	React$1.createElement( Face2, {
        width: width, height: height, centerX: width/2, centerY: height/2, strokeWidth: 5, eyeOffsetX: 40, eyeOffsetY: 30, eyeRadius: 6, mouthWidth: 7, mouthRadius: 40 })
    )
  )
  );


  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,